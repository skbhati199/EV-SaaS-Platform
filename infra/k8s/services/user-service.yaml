# User Service Configuration
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: ev-saas
  labels:
    app: user-service
    service: user
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
        - name: user-service
          image: nginx:alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8082
              name: http
          volumeMounts:
            - name: user-config
              mountPath: /usr/share/nginx/html
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 20
            periodSeconds: 15
      volumes:
        - name: user-config
          emptyDir: {}
        - name: nginx-conf
          configMap:
            name: user-service-nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: ev-saas
spec:
  ports:
    - port: 8082
      targetPort: 8082
      name: http
  selector:
    app: user-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-nginx-conf
  namespace: ev-saas
data:
  default.conf: |
    server {
        listen 8082;
        server_name localhost;
        
        # Root endpoint
        location / {
            default_type application/json;
            return 200 '{"status": "success", "message": "User service running in temporary mode", "version": "1.0.0"}';
        }
        
        # Health check endpoint
        location /actuator/health {
            default_type application/json;
            return 200 '{"status":"UP","components":{"db":{"status":"UP"},"diskSpace":{"status":"UP"},"ping":{"status":"UP"}},"groups":["liveness","readiness"]}';
        }
        
        # API endpoints
        location /api/v1/users {
            default_type application/json;
            return 200 '[{"id": "1e478291-9f16-41de-8a17-381f86ae974e", "email": "admin@example.com", "firstName": "Admin", "lastName": "User", "role": "ADMIN", "active": true}]';
        }
        
        location /api/v1/users/roles {
            default_type application/json;
            return 200 '["ADMIN", "CPO", "EMSP", "USER"]';
        }
        
        location ~ ^/api/v1/users/([^/]+)$ {
            default_type application/json;
            return 200 '{"id": "1e478291-9f16-41de-8a17-381f86ae974e", "email": "admin@example.com", "firstName": "Admin", "lastName": "User", "role": "ADMIN", "active": true}';
        }
        
        # Swagger API docs
        location = /v3/api-docs/user-service {
            default_type application/json;
            return 200 '{"openapi": "3.0.1", "info": {"title": "User Service API", "description": "API Documentation for User Service", "version": "1.0.0"}, "tags": [{"name": "Users", "description": "User Operations"}], "paths": {}}';
        }
    }
