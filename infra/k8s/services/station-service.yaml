# Station Service Configuration
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: station-service
  namespace: ev-saas
  labels:
    app: station-service
    service: station
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: station-service
  template:
    metadata:
      labels:
        app: station-service
    spec:
      containers:
        - name: station-service
          image: nginx:alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8084
              name: http
          volumeMounts:
            - name: station-config
              mountPath: /usr/share/nginx/html
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8084
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8084
            initialDelaySeconds: 20
            periodSeconds: 15
      volumes:
        - name: station-config
          emptyDir: {}
        - name: nginx-conf
          configMap:
            name: station-service-nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: station-service
  namespace: ev-saas
spec:
  ports:
    - port: 8084
      targetPort: 8084
      name: http
  selector:
    app: station-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: station-service-nginx-conf
  namespace: ev-saas
data:
  default.conf: |
    server {
        listen 8084;
        server_name localhost;
        
        # Root endpoint
        location / {
            default_type application/json;
            return 200 '{"status": "success", "message": "Station service running in temporary mode", "version": "1.0.0"}';
        }
        
        # Health check endpoint
        location /actuator/health {
            default_type application/json;
            return 200 '{"status":"UP","components":{"db":{"status":"UP"},"diskSpace":{"status":"UP"},"ping":{"status":"UP"}},"groups":["liveness","readiness"]}';
        }
        
        # API endpoints
        location /api/v1/stations {
            default_type application/json;
            return 200 '[{"id": "fc5a81b3-4dad-4c7e-b8f3-0c9c2746be22", "name": "Sample EV Station", "location": {"latitude": 37.7749, "longitude": -122.4194}, "status": "AVAILABLE", "connectorTypes": ["CCS", "CHAdeMO", "Type2"], "power": 150, "pricePerKwh": 0.45}]';
        }
        
        location /api/v1/stations/connectors {
            default_type application/json;
            return 200 '[{"id": "c1-fc5a81b3", "stationId": "fc5a81b3-4dad-4c7e-b8f3-0c9c2746be22", "type": "CCS", "power": 150, "status": "AVAILABLE"}]';
        }
        
        location /api/v1/stations/operators {
            default_type application/json;
            return 200 '[{"id": "op-12345", "name": "EcoCharge Inc.", "contactEmail": "contact@ecocharge.example.com", "stationCount": 42}]';
        }
        
        # Swagger API docs
        location = /v3/api-docs/station-service {
            default_type application/json;
            return 200 '{"openapi": "3.0.1", "info": {"title": "Station Service API", "description": "API Documentation for Station Service", "version": "1.0.0"}, "tags": [{"name": "Stations", "description": "Station Operations"}], "paths": {}}';
        }
    }
