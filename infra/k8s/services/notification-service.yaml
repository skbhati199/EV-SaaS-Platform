# Notification Service Configuration
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: ev-saas
  labels:
    app: notification-service
    service: notification
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:alpine
        command: ['sh', '-c', 'until pg_isready -h postgres.ev-infra.svc.cluster.local -p 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: notification-service
          image: nginx:alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8087
              name: http
          volumeMounts:
            - name: notification-config
              mountPath: /usr/share/nginx/html
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8087
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8087
            initialDelaySeconds: 20
            periodSeconds: 15
      volumes:
        - name: notification-config
          emptyDir: {}
        - name: nginx-conf
          configMap:
            name: notification-service-nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: ev-saas
spec:
  ports:
    - port: 8087
      targetPort: 8087
      name: http
  selector:
    app: notification-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-service-nginx-conf
  namespace: ev-saas
data:
  default.conf: |
    server {
        listen 8087;
        server_name localhost;
        
        # Root endpoint
        location / {
            default_type application/json;
            return 200 '{"status": "success", "message": "Notification service running in temporary mode", "version": "1.0.0"}';
        }
        
        # Health check endpoint
        location /actuator/health {
            default_type application/json;
            return 200 '{"status":"UP","components":{"db":{"status":"UP"},"diskSpace":{"status":"UP"},"ping":{"status":"UP"}},"groups":["liveness","readiness"]}';
        }
        
        # API endpoints
        location /api/v1/notifications {
            default_type application/json;
            return 200 '[{"id": "b2c3d4e5-f6g7-8h9i-j0k1-l2m3n4o5p6q7", "userId": "1e478291-9f16-41de-8a17-381f86ae974e", "type": "EMAIL", "status": "SENT", "subject": "Welcome to EV SaaS Platform", "sentAt": "2025-05-09T10:00:00Z"}]';
        }
        
        location /api/v1/notifications/templates {
            default_type application/json;
            return 200 '[{"id": "template-001", "name": "Welcome Email", "type": "EMAIL", "subject": "Welcome to EV SaaS Platform", "content": "Hello {{name}}, welcome to the EV SaaS Platform!"}]';
        }
        
        location /api/v1/notifications/settings {
            default_type application/json;
            return 200 '{"userId": "1e478291-9f16-41de-8a17-381f86ae974e", "emailEnabled": true, "smsEnabled": true, "pushEnabled": false}';
        }
        
        # Swagger API docs
        location = /v3/api-docs/notification-service {
            default_type application/json;
            return 200 '{"openapi": "3.0.1", "info": {"title": "Notification Service API", "description": "API Documentation for Notification Service", "version": "1.0.0"}, "tags": [{"name": "Notifications", "description": "Notification Operations"}], "paths": {}}';
        }
    }
