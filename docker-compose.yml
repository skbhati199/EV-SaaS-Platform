version: '3.8'

services:
  ## Databases
  # TimescaleDB for time-series data (charging sessions, telemetry, etc.)
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: ev-saas-timescaledb
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: evsaas
      POSTGRES_PASSWORD: evsaas_password
      POSTGRES_DB: evsaas_timeseries_db
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./infra/postgres/init/timescaledb:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - ev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evsaas"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Regular PostgreSQL for user data, auth, billing, etc.
  postgres:
    image: postgres:14-alpine
    container_name: ev-saas-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: evsaas
      POSTGRES_PASSWORD: evsaas_password
      POSTGRES_DB: evsaas_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init/postgres:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - ev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evsaas"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ev-saas-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - ev-network
    command: redis-server --save 60 1 --loglevel warning

  ## Service Discovery
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: ev-saas-eureka
    ports:
      - "8761:8761"
    networks:
      - ev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

    # Kafka and Zookeeper for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ev-saas-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ev-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ev-saas-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ev-network

  ## Nginx Gateway (replaces API Gateway)
  nginx:
    image: nginx:alpine
    container_name: ev-saas-nginx
    ports:
      - "8080:80"
    volumes:
      - ./infra/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./infra/docker/nginx/index.html:/usr/share/nginx/html/index.html:ro
      - ./infra/docker/nginx/custom-swagger.html:/usr/share/nginx/html/custom-swagger.html:ro
      - ./infra/docker/nginx/auth-swagger-test.html:/usr/share/nginx/html/auth-swagger-test.html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - auth-service
      - user-service
      - station-service
      - roaming-service
      - billing-service
      - smart-charging
      - notification-service
    networks:
      - ev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  ## Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      args:
        - MAVEN_ARGS=clean package -DskipTests
    container_name: ev-saas-auth
    ports:
      - "8081:8081"
    depends_on:
      keycloak:
        condition: service_started
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - ev-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/evsaas_db
      - SPRING_DATASOURCE_USERNAME=evsaas
      - SPRING_DATASOURCE_PASSWORD=evsaas_password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SERVER_PORT=8081
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_SCHEMA_VALIDATION_ENABLED=false
      # Keycloak Configuration
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8080/auth
      - KEYCLOAK_REALM=ev-platform
      - KEYCLOAK_RESOURCE=auth-service
      - KEYCLOAK_SSL_REQUIRED=external
      - KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS=true
      - KEYCLOAK_ADMIN_USERNAME=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_CLIENT_SECRET=defaultClientSecret
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/ev-platform
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/ev-platform/protocol/openid-connect/certs
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      # Swagger Configuration
      - SPRINGDOC_API_DOCS_ENABLED=true
      - SPRINGDOC_SWAGGER_UI_ENABLED=true
      - SPRINGDOC_SWAGGER_UI_PATH=/swagger-ui.html
      - SPRINGDOC_API_DOCS_PATH=/api-docs
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8081"

  ## User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: ev-saas-user
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - ev-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/evsaas_db
      - SPRING_DATASOURCE_USERNAME=evsaas
      - SPRING_DATASOURCE_PASSWORD=evsaas_password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SERVER_PORT=8082
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_SCHEMA_VALIDATION_ENABLED=false
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      # Keycloak Configuration
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/ev-platform
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/ev-platform/protocol/openid-connect/certs
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8082"

  ## Billing Service
  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    container_name: ev-saas-billing
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - ev-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/evsaas_db
      - SPRING_DATASOURCE_USERNAME=evsaas
      - SPRING_DATASOURCE_PASSWORD=evsaas_password
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/auth/realms/ev-platform
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/auth/realms/ev-platform/protocol/openid-connect/certs
      - TIMESCALE_DATASOURCE_URL=jdbc:postgresql://timescaledb:5432/evsaas_timeseries_db
      - TIMESCALE_DATASOURCE_USERNAME=evsaas
      - TIMESCALE_DATASOURCE_PASSWORD=evsaas_password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SERVER_PORT=8083
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_SCHEMA_VALIDATION_ENABLED=false
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8083"
      
  ## Station Service (uses TimescaleDB for time-series data)
  station-service:
    build:
      context: ./station-service
      dockerfile: Dockerfile
      args:
        - MAVEN_ARGS=clean package -DskipTests
        - SPRING_PROFILES_ACTIVE=local
    container_name: ev-saas-station
    ports:
      - "8084:8084"
    depends_on:
      timescaledb:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - ev-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://timescaledb:5432/evsaas_timeseries_db
      - SPRING_DATASOURCE_USERNAME=evsaas
      - SPRING_DATASOURCE_PASSWORD=evsaas_password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SERVER_PORT=8084
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_SCHEMA_VALIDATION_ENABLED=false
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8084"
      
  ## Scheduler Service
  scheduler-service:
    build:
      context: ./scheduler-service
      dockerfile: Dockerfile
    container_name: ev-saas-scheduler
    ports:
      - "8086:8086"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - ev-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/evsaas_db
      - SPRING_DATASOURCE_USERNAME=evsaas
      - SPRING_DATASOURCE_PASSWORD=evsaas_password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SERVER_PORT=8086
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_SCHEMA_VALIDATION_ENABLED=false
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8086"
      
  ## Notification Service with Kafka
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      args:
        - MAVEN_ARGS=clean package -DskipTests
        - SPRING_PROFILES_ACTIVE=local
    container_name: ev-saas-notification
    ports:
      - "8087:8087"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - ev-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/evsaas_db
      - SPRING_DATASOURCE_USERNAME=evsaas
      - SPRING_DATASOURCE_PASSWORD=evsaas_password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SERVER_PORT=8087
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_SCHEMA_VALIDATION_ENABLED=false
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8087"
      
  ## Smart Charging Service
  smart-charging:
    build:
      context: ./smart-charging
      dockerfile: Dockerfile
    container_name: ev-saas-smart-charging
    ports:
      - "8085:8085"
    depends_on:
      timescaledb:
        condition: service_healthy
      kafka:
        condition: service_started
      keycloak:
        condition: service_started
      eureka-server:
        condition: service_started
    networks:
      - ev-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://timescaledb:5432/evsaas_timeseries_db
      - SPRING_DATASOURCE_USERNAME=evsaas
      - SPRING_DATASOURCE_PASSWORD=evsaas_password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SERVER_PORT=8085
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_SCHEMA_VALIDATION_ENABLED=false
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # Keycloak Configuration
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/ev-platform
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/ev-platform/protocol/openid-connect/certs
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8085"

  ## Roaming Service for OCPI protocol
  roaming-service:
    build:
      context: ./roaming-service
      dockerfile: Dockerfile.simple
    container_name: ev-saas-roaming
    ports:
      - "8088:8088"
    networks:
      - ev-network
    environment:
      - SERVER_PORT=8088
      - OCPI_EXTERNAL_URL=http://roaming-service:8088
      - OCPI_PARTY_ID=EVP
      - OCPI_COUNTRY_CODE=US
      - OCPI_ROLE=CPO
      # Enable metrics and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/actuator/prometheus"
      - "prometheus.port=8088"

  ## Admin Portal
  admin-portal:
    build:
      context: ./admin-portal
      dockerfile: Dockerfile
    container_name: ev-saas-admin-portal
    ports:
      - "3001:3000"
    depends_on:
      - nginx
      - grafana
    networks:
      - ev-network
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://nginx:80
      - NEXT_PUBLIC_GRAFANA_URL=http://localhost:3000
      - NODE_ENV=development

  ## Keycloak for Identity and Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: ev-saas-keycloak
    ports:
      - "8090:8080"
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ev-network
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/evsaas_db
      - KC_DB_USERNAME=evsaas
      - KC_DB_PASSWORD=evsaas_password
      - KC_HOSTNAME=localhost
      - KC_HOSTNAME_PORT=8090
      - KC_HOSTNAME_ADMIN_URL=http://localhost:8090
      - KC_HOSTNAME_URL=http://localhost:8090
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
      - KC_HEALTH_ENABLED=true
      - KC_HTTP_RELATIVE_PATH=/auth
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_ADMIN=admin
    command: start-dev --import-realm
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/opt/keycloak/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./infra/keycloak/realm-import:/opt/keycloak/data/import
      - ./infra/keycloak/healthcheck.sh:/opt/keycloak/bin/healthcheck.sh

  ## Prometheus for metrics collection and monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ev-saas-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ev-network
    depends_on:
      - nginx
      - auth-service
      - user-service
      - station-service
      - billing-service
      - notification-service
      - smart-charging
      - roaming-service

  ## Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ev-saas-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./infra/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    restart: unless-stopped
    networks:
      - ev-network
    depends_on:
      - prometheus
      - loki

  ## Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: ev-saas-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      ev-network:
        aliases:
          - loki
    volumes:
      - ./infra/monitoring/loki:/etc/loki
      - loki_data:/loki
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  ## Promtail to ship logs to Loki
  promtail:
    image: grafana/promtail:latest
    container_name: ev-saas-promtail
    volumes:
      - /var/log:/var/log
      - ./infra/monitoring/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - ev-network
    depends_on:
      - loki

volumes:
  postgres_data:
  timescaledb_data:
  redis_data:
  keycloak_data:
  grafana_data:
  prometheus_data:
  loki_data:
  nginx_logs:

networks:
  ev-network:
    driver: bridge 